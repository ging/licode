const expect = require('chai').expect;
const describeNegotiationTest = require('./utils/NegotiationTest');
const SdpChecker = require('./utils/SdpUtils');

describeNegotiationTest('Simple SDP negotiation started by client', function(ctx) {
  let offer, answer, candidates, erizoMessages, clientStream, label;
  before(async function() {
    clientStream = await ctx.createClientStream();

    await ctx.client.addStream(clientStream);
    await ctx.erizo.publishStream(clientStream);

    offer = await ctx.client.getSignalingMessage();

    await ctx.erizo.processSignalingMessage(offer);
    answer = ctx.erizo.getSignalingMessage();

    await ctx.client.processSignalingMessage(answer);


    if (!ctx.candidates) {
      await ctx.client.waitForCandidates();
      ctx.candidates = await ctx.client.getAllCandidates();
      for (const candidate of ctx.candidates) {
        await ctx.erizo.processSignalingMessage(candidate);
      }
    }

    await ctx.client.waitForConnected();
    await ctx.erizo.waitForReadyMessage();
    erizoMessages = ctx.erizo.getSignalingMessages();
  });

  it('Client should send an offer', function() {
    const sdp = new SdpChecker(offer);
    sdp.expectType('offer');
    sdp.expectVersion(2);
    sdp.doNotExpectToIncludeCandidates();
    sdp.expectToHaveStreams(ctx.clientStreams);
  });

  it('Erizo should send an answer', function() {
    const sdp = new SdpChecker(answer);
    sdp.expectType('answer');
    sdp.expectVersion(0);
    sdp.expectToIncludeCandidates();
    sdp.expectToHaveStreams(ctx.erizoStreams);
  });

  it('Client should send candidates', function() {
    for (const candidate of ctx.candidates) {
      const sdp = new SdpChecker(candidate);
      sdp.expectType('candidate');
    }
  });

  it('Erizo should finish successfully', async function() {
    expect(erizoMessages).to.include({ type: 'ready' });
  });

  ctx.subscribeToErizoStreamStep();
     .

  describe('Second SDP negotiation started by Erizo', ctx.subscribeToErizoStreamStep);
    function() {
    let secondOffer, secondAnswer;

    before(async function() {
      remoteStream = await ctx.createRemoteStream();

      await ctx.erizo.subscribeStream(remoteStream);
      secondOffer = await ctx.erizo.createOffer();

      await ctx.client.processSignalingMessage(secondOffer);
      secondAnswer = await ctx.client.getSignalingMessage();

      await ctx.erizo.processSignalingMessage(secondAnswer);
    });

    it('Erizo should send an offer', function() {
      const sdp = new SdpChecker(secondOffer);
      sdp.expectType('offer');
      sdp.expectVersion(1);
      sdp.expectToHaveStreams(ctx.erizoStreams);
    });

    it('Client should send an answer', function() {
      const sdp = new SdpChecker(secondAnswer);
      sdp.expectType('answer');
      sdp.expectVersion(3);
      sdp.expectToHaveStreams(ctx.clientStreams);
    });
  });
});

describeNegotiationTest('Simple SDP negotiation started by Erizo', function(ctx) {
  let offer, answer, candidates, erizoMessages, remoteStream;

  before(async function() {
    remoteStream = await ctx.createRemoteStream();

    await ctx.erizo.subscribeStream(remoteStream);
    offer = await ctx.erizo.createOffer();

    await ctx.client.processSignalingMessage(offer);
    answer = await ctx.client.getSignalingMessage();

    await ctx.erizo.processSignalingMessage(answer);

    candidates = await ctx.client.getAllCandidates();
    for (const candidate of candidates) {
      await ctx.erizo.processSignalingMessage(candidate);
    }
    await ctx.client.waitForConnected();
    await ctx.erizo.waitForReadyMessage();
    erizoMessages = ctx.erizo.getSignalingMessages();
  });

  it('Erizo should send an offer', function() {
    const sdp = new SdpChecker(offer);
    sdp.expectType('offer');
    sdp.expectVersion(0);
    sdp.expectToIncludeCandidates();
    sdp.expectToHaveStream(remoteStream);
  });

  it('Client should send an answer', function() {
    const sdp = new SdpChecker(answer);
    sdp.expectType('answer');
    sdp.expectVersion(2);
    sdp.doNotExpectToIncludeCandidates();
  });

  it('Client should send candidates', function() {
    for (const candidate of candidates) {
      const sdp = new SdpChecker(candidate);
      sdp.expectType('candidate');
    }
  });

  it('Erizo should finish successfully', async function() {
    expect(erizoMessages).to.include({ type: 'ready' });
  });

  it('Erizo should finish successfully', async function() {
    expect(erizoMessages).to.include({ type: 'ready' });
  });
});

describeNegotiationTest('Conflicting SDP negotiation started by Erizo and Client', function(ctx) {
  let erizoOffer, clientOffer, erizoAnswer, candidates, erizoMessages, clientStream, remoteStream;

  before(async function() {
    clientStream = await ctx.createClientStream();
    remoteStream = await ctx.createRemoteStream();

    await ctx.client.addStream(clientStream);

    await ctx.erizo.publishStream(clientStream);
    await ctx.erizo.subscribeStream(remoteStream);

    erizoOffer = await ctx.erizo.createOffer();
    clientOffer = await ctx.client.getSignalingMessage();

    candidates = await ctx.client.getAllCandidates();

    await ctx.erizo.processSignalingMessage(clientOffer);
    await ctx.client.processSignalingMessage(erizoOffer);  // This should not generate an answer

    erizoAnswer = await ctx.erizo.getSignalingMessage();

    for (const candidate of candidates) {
      await ctx.erizo.processSignalingMessage(candidate);
    }

    await ctx.client.processSignalingMessage(erizoAnswer);

    await ctx.erizo.waitForReadyMessage();
    await ctx.client.waitForConnected();
    erizoMessages = ctx.erizo.getSignalingMessages();
  });

  it('Erizo should send an offer', function() {
    const sdp = new SdpChecker(erizoOffer);
    sdp.expectType('offer');
    sdp.expectVersion(0);
    sdp.expectToIncludeCandidates();
    sdp.expectToHaveStream(remoteStream);
  });

  it('Client should send an offer', function() {
    const sdp = new SdpChecker(clientOffer);
    sdp.expectType('offer');
    sdp.expectVersion(2);
    sdp.doNotExpectToIncludeCandidates();
    sdp.expectToHaveStream(clientStream);
  });

  it('Erizo should send an answer', function() {
    const sdp = new SdpChecker(erizoAnswer);
    sdp.expectType('answer');
    sdp.expectVersion(1);
    sdp.expectToIncludeCandidates();
  });

  it('Client should send candidates', function() {
    for (const candidate of candidates) {
      const sdp = new SdpChecker(candidate);
      sdp.expectType('candidate');
    }
  });

  it('Erizo should finish successfully', async function() {
    expect(erizoMessages).to.include({ type: 'ready' });
  });
});
